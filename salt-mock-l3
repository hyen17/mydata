(async () => {
    // --- UI Elements ---
    let uiContainer;
    let urlInputsContainer;
    let addUrlButton;
    let startButton;
    let statusDiv;
    let questionCountInput;

    // --- Data Storage ---
    const allQuizData = [];
    let currentQuestionIndex = 0;
    let totalQuestions = 0;

    // --- Configuration ---
    const DELAY_AFTER_CLICK = 500;
    const DELAY_AFTER_TAB_CHANGE = 1000;
    const DELAY_AFTER_QUESTION_LOAD = 1000;
    const DELAY_BETWEEN_QUIZZES = 5000;

    // --- Helper Functions ---

    function logStatus(message, type = 'info') {
        if (statusDiv) {
            statusDiv.textContent = message;
            statusDiv.style.color = type === 'error' ? 'red' : type === 'success' ? 'green' : 'black';
        }
        console.log(`[Quiz Processor] ${message}`);
    }

    async function delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    async function clickElement(selector, retries = 5, delayMs = DELAY_AFTER_CLICK) {
        for (let i = 0; i < retries; i++) {
            const element = document.querySelector(selector);
            if (element && !element.disabled && element.offsetParent !== null) {
                element.click();
                await delay(delayMs);
                return true;
            }
            await delay(200);
        }
        console.warn(`[Quiz Processor] Element not found or not clickable: ${selector}`);
        return false;
    }

    async function waitForElement(selector, timeout = 10000, interval = 200) {
        const startTime = Date.now();
        while (Date.now() - startTime < timeout) {
            const element = document.querySelector(selector);
            if (element && element.offsetParent !== null) {
                return element;
            }
            await delay(interval);
        }
        console.warn(`[Quiz Processor] Element not found after ${timeout}ms: ${selector}`);
        return null;
    }

    function cleanHTML(htmlString) {
        const tempDiv = document.createElement('div');
        tempDiv.innerHTML = htmlString.replace(/<br\s*>/gi, '<br/>');

        // Remove unwanted elements
        tempDiv.querySelectorAll('header, footer, aside, button, select, input, textarea, form, ._pointsWrapper_esijj_101, ._submitted_1efor_16, ._wrap_1ylu9_1, ._noLabel_1ylu9_7, ._inputSelect_1qywi_22, ._itemCompiled_1qywi_12 > div:first-child, ._title_18rg6_1 > h2:first-child, ._avg_1f8fe_31, ._letter_1f8fe_16, ._input_1f8fe_56, ._is-closed_1f8fe_70, ._is-wrong_1f8fe_70, ._is-correct_1f8fe_79, ._icon_1j3qu_47, ._vote_10umj_22, ._status_10umj_155, ._meta_10umj_76, ._ask_d2k3f_2').forEach(el => el.remove());

        // Remove unwanted attributes
        tempDiv.querySelectorAll('*').forEach(el => {
            el.removeAttribute('class');
            el.removeAttribute('style');
            el.removeAttribute('id');
            el.removeAttribute('aria-hidden');
            el.removeAttribute('aria-disabled');
            el.removeAttribute('data-component');
            el.removeAttribute('tabindex');
            el.removeAttribute('role');
            el.removeAttribute('hrefs');
            el.removeAttribute('data-name');
            el.removeAttribute('aria-selected');
            el.removeAttribute('title');
            el.removeAttribute('disabled');
            el.removeAttribute('uid');
            el.removeAttribute('selectvalue');
            el.removeAttribute('trackobject');
            el.removeAttribute('type');
            el.removeAttribute('for');
            el.removeAttribute('maxlength');
            el.removeAttribute('placeholder');
            el.removeAttribute('cols');
            el.removeAttribute('rows');
            el.removeAttribute('value');
            el.removeAttribute('xmlns');
            el.removeAttribute('viewBox');
            el.removeAttribute('width');
            el.removeAttribute('height');
            el.removeAttribute('fill');
            el.removeAttribute('stroke');
            el.removeAttribute('stroke-width');
            el.removeAttribute('stroke-linecap');
            el.removeAttribute('stroke-linejoin');
            el.removeAttribute('d');
            el.removeAttribute('transform');
            el.removeAttribute('jax');
            el.removeAttribute('ctxtmenu_counter');
            el.removeAttribute('focusable');
            el.removeAttribute('vertical-align');
            el.removeAttribute('xlink');
            el.removeAttribute('unselectable');
            el.removeAttribute('display');
            el.removeAttribute('math');
            el.removeAttribute('mml-node');
            el.removeAttribute('data-c');
            el.removeAttribute('event');
            el.removeAttribute('datetime');
            el.removeAttribute('scope');
            el.removeAttribute('name');
            el.removeAttribute('checked');
        });

        // Handle MathJax containers
        tempDiv.querySelectorAll('mjx-container').forEach(mjx => {
            const assistiveMml = mjx.querySelector('mjx-assistive-mml');
            if (assistiveMml) {
                mjx.replaceWith(assistiveMml);
            } else {
                mjx.remove();
            }
        });

        // Preserve text nodes after <br> tags and single spaces between inline elements
        function removeWhitespaceNodes(node) {
            const inlineTags = ['strong', 'i', 'em', 'b', 'span', 'a'];
            for (let i = node.childNodes.length - 1; i >= 0; i--) {
                const child = node.childNodes[i];
                if (child.nodeType === Node.TEXT_NODE) {
                    const text = child.textContent;
                    const prevSibling = child.previousSibling;
                    const nextSibling = child.nextSibling;
                    const isAfterBr = prevSibling && prevSibling.nodeType === Node.ELEMENT_NODE && prevSibling.tagName.toLowerCase() === 'br';
                    const isBetweenInline = (prevSibling && nextSibling &&
                        prevSibling.nodeType === Node.ELEMENT_NODE && nextSibling.nodeType === Node.ELEMENT_NODE &&
                        inlineTags.includes(prevSibling.tagName.toLowerCase()) && inlineTags.includes(nextSibling.tagName.toLowerCase()));
                    if (isAfterBr || (isBetweenInline && text === ' ')) {
                        // Preserve text after <br> or single space between inline elements
                        continue;
                    }
                    // Normalize multiple spaces or newlines to a single space, but only if not after <br>
                    if (text.trim() === '' && text !== ' ' && !isAfterBr) {
                        node.removeChild(child);
                        console.warn(`[Quiz Processor] Removed whitespace-only text node: "${text}"`);
                    } else if (text.match(/\s{2,}|\n+/) && !isAfterBr) {
                        child.textContent = ' ';
                        console.warn(`[Quiz Processor] Normalized text node to single space: "${text}"`);
                    }
                } else if (child.nodeType === Node.ELEMENT_NODE) {
                    removeWhitespaceNodes(child);
                }
            }
        }
        removeWhitespaceNodes(tempDiv);

        // Recursively remove empty elements
        let removed;
        do {
            removed = false;
            tempDiv.querySelectorAll('div, span, p, li').forEach(el => {
                if (!el.children.length && !el.textContent.trim()) {
                    el.remove();
                    removed = true;
                }
            });
        } while (removed);

        // Trim whitespace and remove trailing/leading empty tags
        let cleanedHTML = tempDiv.innerHTML.trim();
        cleanedHTML = cleanedHTML.replace(/(<div>\s*<\/div>|<p>\s*<\/p>|<li>\s*<\/li>|<span>\s*<\/span>)*$/g, '');
        cleanedHTML = cleanedHTML.replace(/^(<div>\s*<\/div>|<p>\s*<\/p>|<li>\s*<\/li>|<span>\s*<\/span>)*\s*/g, '');

        // Log if cleaned HTML is empty or nearly empty
        if (!cleanedHTML || cleanedHTML === '<div></div>' || cleanedHTML === '<p></p>') {
            console.warn('[Quiz Processor] Cleaned HTML is empty or nearly empty');
            return '<div>No content available.</div>';
        }

        return cleanedHTML;
    }

    // --- Core Logic ---

    async function extractQuizData() {
        logStatus('Starting data extraction...');
        const quizData = [];
        let currentPassage = null;
        let currentPassageRange = null;

        const questionButtons = Array.from(document.querySelectorAll('aside ._navList_2xaub_30 button._question_2xaub_1'));
        totalQuestions = questionButtons.length;

        const maxQuestions = questionCountInput.value ? parseInt(questionCountInput.value, 10) : totalQuestions;
        const questionsToProcess = Math.min(maxQuestions, totalQuestions);
        logStatus(`Processing up to ${questionsToProcess} of ${totalQuestions} questions`);

        for (let i = 0; i < questionsToProcess; i++) {
            logStatus(`Processing question ${i + 1} of ${questionsToProcess}...`);
            const questionButton = questionButtons[i];
            const questionId = questionButton.querySelector('span')?.textContent?.trim() || `Question ${i + 1}`;

            await clickElement(`aside ._navList_2xaub_30 button._question_2xaub_1:nth-child(${i + 1})`, 10, DELAY_AFTER_QUESTION_LOAD);

            // --- 1. Determine Question Type ---
            const isMCQ = document.querySelectorAll('div._panel_esijj_20._secondaryPanel_esijj_55 input[type="radio"]').length > 0;
            const isEssay = !isMCQ;

            // --- 2. Extract Passage ---
            if (isEssay) {
                const hasPassageTab = document.querySelector('ul[role="tablist"] a[data-name="Passage"]') !== null;
                if (hasPassageTab) {
                    await clickElement('ul[role="tablist"] a[data-name="Passage"]', 5, DELAY_AFTER_TAB_CHANGE);
                    const passageSection = await waitForElement('section[role="tabpanel"]:not([style*="display: none"])');
                    const passageTitleElement = passageSection?.querySelector('div._title_18rg6_1 h3');

                    if (passageTitleElement) {
                        const newPassageRangeMatch = passageTitleElement.textContent.match(/Questions (\d+\.\d+-\d+\.\d+)/);
                        const newPassageRange = newPassageRangeMatch ? newPassageRangeMatch[1] : null;

                        if (newPassageRange && newPassageRange !== currentPassageRange) {
                            const passageContentElement = passageSection?.querySelector('div.contentBlock');
                            if (passageContentElement) {
                                currentPassage = {
                                    type: 'passage',
                                    id: newPassageRange,
                                    contentHTML: cleanHTML(passageContentElement.outerHTML)
                                };
                                quizData.push(currentPassage);
                                currentPassageRange = newPassageRange;
                                logStatus(`Extracted new passage for range ${currentPassageRange}`);
                            }
                        }
                    } else {
                        logStatus(`No passage title found for essay question ${questionId}`);
                    }
                } else {
                    logStatus(`No Passage tab found for essay question ${questionId}`);
                    currentPassage = null;
                    currentPassageRange = null;
                }
            } else {
                // MCQ: Passage is in the primary panel
                const passageContentElement = await waitForElement('div._panel_esijj_20:not(._secondaryPanel_esijj_55) div.contentBlock');
                if (passageContentElement) {
                    const passageTitleElement = document.querySelector('div._panel_esijj_20:not(._secondaryPanel_esijj_55) div._title_18rg6_1 h3');
                    const newPassageRange = passageTitleElement?.textContent.match(/Questions (\d+\.\d+-\d+\.\d+)/)?.[1] || `MCQ Passage ${questionId}`;
                    if (newPassageRange !== currentPassageRange) {
                        currentPassage = {
                            type: 'passage',
                            id: newPassageRange,
                            contentHTML: cleanHTML(passageContentElement.outerHTML)
                        };
                        quizData.push(currentPassage);
                        currentPassageRange = newPassageRange;
                        logStatus(`Extracted MCQ passage for ${newPassageRange}`);
                    }
                } else {
                    logStatus(`No passage content found for MCQ question ${questionId}`);
                    currentPassage = null;
                    currentPassageRange = null;
                }
            }

            // --- 3. Extract Question Text ---
            const questionTextElement = await waitForElement('div._panel_esijj_20._secondaryPanel_esijj_55 .contentBlock');
            const questionHTML = questionTextElement ? cleanHTML(questionTextElement.outerHTML) : '<div>Question text not found.</div>';

            // --- 4. Extract Answers ---
            let answers = [];
            if (isMCQ) {
                const answerElements = document.querySelectorAll('div._panel_esijj_20._secondaryPanel_esijj_55 ol li label._answer_1f8fe_1');
                answers = Array.from(answerElements).map((label, index) => {
                    const text = label.querySelector('div.contentBlock p')?.textContent?.trim() || '';
                    const isCorrect = label.classList.contains('_is-correct_1f8fe_79');
                    return {
                        letter: String.fromCharCode(65 + index), // A, B, C, etc.
                        textHTML: cleanHTML(label.querySelector('div.contentBlock')?.outerHTML || ''),
                        isCorrect
                    };
                });
            }

            // --- 5. Extract Solution and Grading Rubric ---
            let modelSolutionHTML = '';
            let gradingGuideHTML = '';

            if (isEssay) {
                const hasSolutionTab = document.querySelector('ul[role="tablist"] a[data-name="Solution-& Rubric"]') !== null;
                if (hasSolutionTab) {
                    await clickElement('ul[role="tablist"] a[data-name="Solution-& Rubric"]', 5, DELAY_AFTER_TAB_CHANGE);
                    const solutionSection = await waitForElement('section[role="tabpanel"]:not([style*="display: none"])');
                    const modelSolutionElement = solutionSection?.querySelector('div.contentBlock');
                    if (modelSolutionElement) {
                        modelSolutionHTML = cleanHTML(modelSolutionElement.outerHTML);
                    }

                    const rubricElements = solutionSection?.querySelectorAll('div._container_1qywi_1 div._itemCompiled_1qywi_12 p');
                    if (rubricElements.length > 0) {
                        gradingGuideHTML = '<ul>';
                        answers = Array.from(rubricElements).map(p => {
                            const description = p.textContent?.trim() || '';
                            gradingGuideHTML += `<li>${description}</li>`;
                            return {
                                letter: '',
                                textHTML: cleanHTML(`<p>${description}</p>`),
                                isCorrect: false
                            };
                        });
                        gradingGuideHTML += '</ul>';
                        gradingGuideHTML = cleanHTML(gradingGuideHTML);
                    }

                    // Return to Passage tab if it exists
                    const hasPassageTab = document.querySelector('ul[role="tablist"] a[data-name="Passage"]') !== null;
                    if (hasPassageTab) {
                        await clickElement('ul[role="tablist"] a[data-name="Passage"]', 5, DELAY_AFTER_TAB_CHANGE);
                    }
                } else {
                    logStatus(`No Solution-& Rubric tab found for essay question ${questionId}`);
                }
            } else {
                // MCQ: Check for Solution tab for Written Solution
                const hasSolutionTab = document.querySelector('ul[role="tablist"] a[data-name="Solution"]') !== null;
                if (hasSolutionTab) {
                    await clickElement('ul[role="tablist"] a[data-name="Solution"]', 5, DELAY_AFTER_TAB_CHANGE);
                    const solutionSection = await waitForElement('section[role="tabpanel"]:not([style*="display: none"])');
                    const modelSolutionElement = solutionSection?.querySelector('div._supplementAreaDesktop_1kts7_65 div.contentBlock');
                    if (modelSolutionElement) {
                        modelSolutionHTML = cleanHTML(modelSolutionElement.outerHTML);
                        logStatus(`Extracted Written Solution for MCQ question ${questionId}`);
                    }
                } else {
                    logStatus(`No Solution tab found for MCQ question ${questionId}`);
                }
            }

            quizData.push({
                type: 'question',
                id: questionId,
                questionHTML,
                answers,
                isEssay,
                modelSolutionHTML,
                gradingGuideHTML,
                passageRange: currentPassageRange
            });

            logStatus(`Extracted data for Question ${questionId}.`);
        }
        return quizData;
    }

    function createOutputPage(data, type = 'questions_only') {
        const newWindow = window.open('', '_blank');
        if (!newWindow) {
            logStatus('Failed to open new window. Please ensure pop-ups are allowed.', 'error');
            return;
        }

        newWindow.document.write(`
            <!DOCTYPE html>
            <html lang="en">
            <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>Quiz Output - ${type === 'questions_only' ? 'Questions Only' : 'Questions with Solutions'}</title>
                <style>
                    body { font-family: Arial, sans-serif; margin: 20px; line-height: 1.6; }
                    .page-break { page-break-after: always; }
                    .section-title { font-size: 1.5em; margin-top: 20px; margin-bottom: 10px; border-bottom: 2px solid #333; padding-bottom: 5px; }
                    .passage-content { margin-bottom: 10px; padding: 15px; border: 1px solid #eee; border-radius: 5px; overflow: hidden; }
                    .question-content { page-break-inside: avoid; min-height: 1px; margin-bottom: 10px; padding: 15px; border: 1px solid #eee; border-radius: 5px; }
                    .question-id { font-weight: bold; font-size: 1.2em; margin-bottom: 10px; }
                    .answers ol { list-style-type: upper-alpha; padding-left: 20px; }
                    .answers li { margin-bottom: 5px; }
                    .correct-answer { color: green; font-weight: bold; }
                    .solution-title, .grading-guide-title { font-weight: bold; margin-top: 15px; margin-bottom: 5px; }
                    .solution-content, .grading-guide-content { margin-bottom: 10px; }
                    table { width: 100%; border-collapse: collapse; margin-bottom: 1em; }
                    th, td { border: 1px solid #ccc; padding: 8px; text-align: left; }
                    th { background-color: #f2f2f2; }
                    mjx-container { display: block; overflow-x: auto; }
                </style>
            </head>
            <body>
                <h1>Mock Exam - ${type === 'questions_only' ? 'Questions' : 'Questions with Solutions'}</h1>
        `);

        data.forEach((item, index) => {
            if (item.type === 'passage') {
                newWindow.document.write(`
                    <div class="section-title">Passage for Questions ${item.id}</div>
                    <div class="passage-content">${item.contentHTML}</div>
                `);
                // Add page break after passage only if it's the last item
                if (index === data.length - 1) {
                    newWindow.document.write('<div class="page-break"></div>');
                }
            } else if (item.type === 'question') {
                newWindow.document.write(`
                    <div class="question-content">
                        <div class="question-id">Question ${item.id}</div>
                        ${item.questionHTML}
                `);

                if (!item.isEssay) {
                    newWindow.document.write('<div class="answers"><ol>');
                    item.answers.forEach(answer => {
                        const classAttr = (type === 'questions_with_solutions' && answer.isCorrect) ? ' class="correct-answer"' : '';
                        newWindow.document.write(`<li${classAttr}>${answer.textHTML}</li>`);
                    });
                    newWindow.document.write('</ol></div>');
                }

                if (type === 'questions_with_solutions') {
                    if (item.modelSolutionHTML || item.gradingGuideHTML) {
                        newWindow.document.write('<div class="solution-section">');
                        if (item.modelSolutionHTML) {
                            newWindow.document.write(`
                                <div class="solution-title">${item.isEssay ? 'Model Solution' : 'Written Solution'}</div>
                                <div class="solution-content">${item.modelSolutionHTML}</div>
                            `);
                        }
                        if (item.gradingGuideHTML) {
                            newWindow.document.write(`
                                <div class="grading-guide-title">Grading Guide</div>
                                <div class="grading-guide-content">${item.gradingGuideHTML}</div>
                            `);
                        }
                        newWindow.document.write('</div>');
                    }
                }
                newWindow.document.write(`</div>`);

                // Add page break after the last question of a passage
                const nextItem = data[index + 1];
                if (item.passageRange) {
                    const passageEnd = item.passageRange.split('-')[1];
                    if (item.id === passageEnd || !nextItem || nextItem.type === 'passage') {
                        newWindow.document.write('<div class="page-break"></div>');
                    }
                }
            }
        });

        newWindow.document.write(`
            </body>
            </html>
        `);
        newWindow.document.close();
    }

    // --- UI Initialization ---

    function createUI() {
        uiContainer = document.createElement('div');
        uiContainer.style.position = 'fixed';
        uiContainer.style.top = '10px';
        uiContainer.style.right = '10px';
        uiContainer.style.backgroundColor = 'white';
        uiContainer.style.border = '1px solid #ccc';
        uiContainer.style.padding = '15px';
        uiContainer.style.zIndex = '9999';
        uiContainer.style.boxShadow = '0 2px 10px rgba(0,0,0,0.1)';
        uiContainer.style.borderRadius = '8px';
        uiContainer.style.fontFamily = 'Arial, sans-serif';
        uiContainer.style.fontSize = '14px';

        const questionCount = document.querySelectorAll('aside ._navList_2xaub_30 button._question_2xaub_1').length;

        uiContainer.innerHTML = `
            <h3 style="margin-top: 0; margin-bottom: 10px;">Quiz Processor</h3>
            <div id="urlInputs" style="margin-bottom: 10px;">
                <div style="margin-bottom: 5px;">
                    <label for="currentUrl" style="display: block; margin-bottom: 3px;">Current Quiz URL:</label>
                    <input type="text" id="currentUrl" value="${window.location.href}" style="width: 250px; padding: 5px; border: 1px solid #ddd; border-radius: 4px;" readonly>
                </div>
            </div>
            <div style="margin-bottom: 10px;">
                <label for="questionCount" style="display: block; margin-bottom: 3px;">Number of Questions to Process (max ${questionCount}):</label>
                <input type="number" id="questionCount" min="1" max="${questionCount}" value="${questionCount}" style="width: 100px; padding: 5px; border: 1px solid #ddd; border-radius: 4px;">
            </div>
            <button id="addUrl" style="padding: 8px 12px; background-color: #007bff; color: white; border: none; border-radius: 4px; cursor: pointer; margin-bottom: 10px;">Add Another Quiz URL</button>
            <button id="startProcessing" style="padding: 8px 12px; background-color: #28a745; color: white; border: none; border-radius: 4px; cursor: pointer; margin-bottom: 10px;">Start Processing</button>
            <div id="status" style="margin-top: 10px; font-weight: bold;">Ready</div>
        `;

        document.body.appendChild(uiContainer);

        urlInputsContainer = uiContainer.querySelector('#urlInputs');
        addUrlButton = uiContainer.querySelector('#addUrl');
        startButton = uiContainer.querySelector('#startProcessing');
        statusDiv = uiContainer.querySelector('#status');
        questionCountInput = uiContainer.querySelector('#questionCount');

        addUrlButton.addEventListener('click', () => {
            const newDiv = document.createElement('div');
            newDiv.style.marginBottom = '5px';
            newDiv.innerHTML = `
                <label style="display: block; margin-bottom: 3px;">Additional Quiz URL:</label>
                <input type="text" class="additionalUrl" style="width: 250px; padding: 5px; border: 1px solid #ddd; border-radius: 4px;">
            `;
            urlInputsContainer.appendChild(newDiv);
        });

        startButton.addEventListener('click', startProcessing);
    }

    async function startProcessing() {
        startButton.disabled = true;
        addUrlButton.disabled = true;
        logStatus('Processing started...');

        const urlsToProcess = [window.location.href];
        document.querySelectorAll('.additionalUrl').forEach(input => {
            if (input.value.trim()) {
                urlsToProcess.push(input.value.trim());
            }
        });

        if (urlsToProcess.length > 1) {
            logStatus('Warning: Multi-URL processing is unreliable for console scripts. Only the current page will be processed.', 'info');
        }

        const currentUrl = window.location.href;
        logStatus(`Processing current quiz: ${currentUrl}`);

        allQuizData.length = 0;
        const currentQuizData = await extractQuizData();
        allQuizData.push(...currentQuizData);

        logStatus('All quizzes processed. Generating output...', 'success');
        createOutputPage(allQuizData, 'questions_only');
        createOutputPage(allQuizData, 'questions_with_solutions');

        logStatus('Processing complete!', 'success');
        startButton.disabled = false;
        addUrlButton.disabled = false;
    }

    createUI();
})();
