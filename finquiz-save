(async function () {
/********************************************************
 * FinQuiz Exporter — A3 (Optimized Page Flow)
 * - Base: The user's perfect script.
 * - MODIFICATION: CSS is changed to allow multiple
 * questions per page if they fit, preventing wasted space.
 ********************************************************/

// ---------------- Prompt & URL range ------------------
const startUrl = prompt("URL HALAMAN PERTAMA:");
const endUrl   = prompt("URL HALAMAN TERAKHIR:");
if (!startUrl || !endUrl) { console.warn("[Exporter] Dibatalkan: URL tidak lengkap."); return; }

function parseLastIndex(u){
  try{
    const url = new URL(u, location.href);
    const parts = url.pathname.split('/').filter(Boolean);
    const last = parts[parts.length-1];
    const idx  = parseInt(last,10);
    if(!Number.isFinite(idx)) return null;
    const prefix = url.origin + '/' + parts.slice(0,-1).join('/') + '/';
    return {prefix, idx};
  }catch{ return null; }
}
const s = parseLastIndex(startUrl), e = parseLastIndex(endUrl);
if(!s || !e || s.prefix !== e.prefix){ console.error("[Exporter] Pola URL tidak cocok."); return; }
const startIdx = Math.min(s.idx, e.idx), endIdx = Math.max(s.idx, e.idx), prefix = s.prefix;

// ---------------------- Utils -------------------------
async function inlineAllImages(el, pageHref){
  if(!el || el.nodeType !== 1) return;
  const imgs = Array.from(el.querySelectorAll('img'));
  for(const img of imgs){
    const src = img.getAttribute('src') || '';
    if (src.startsWith('data:')) continue;
    try {
        const abs = new URL(src, pageHref).href;
        const res = await fetch(abs, {credentials:'include'});
        if(!res.ok) continue;
        const blob = await res.blob();
        const fr = new FileReader();
        const dataUrl = await new Promise(r => { fr.onload = () => r(fr.result); fr.readAsDataURL(blob); });
        img.src = dataUrl;
        img.removeAttribute('width'); img.removeAttribute('height');
        Object.assign(img.style,{maxWidth:'100%',height:'auto',display:'block',margin:'0'});
    } catch(e) { console.warn("Gagal inline gambar:", src); }
  }
}
async function serializeNodesAsync(nodes, pageHref){
  const div = document.createElement('div');
  for(const n of nodes) div.appendChild(n.cloneNode(true));
  await inlineAllImages(div, pageHref);
  return div.innerHTML;
}
function getCorrectLetter(answerBoxEl){
  if(!answerBoxEl) return '';
  const t = answerBoxEl.textContent || '';
  const m2 = t.match(/correct option is\s*([A-D])/i); if(m2) return m2[1].toUpperCase();
  const m1 = t.match(/You\s+Answered\s*([A-D])/i);   if(m1) return m1[1].toUpperCase();
  return '';
}
function markCorrectChoiceIfPossible(html, L){
  if(!L || !html) return html;
  const x = L.trim().toUpperCase();
  html = html.replace(new RegExp('(<li[^>]*>\\s*)(\\(?'+x+'\\)?[\\.)\\:]?\\s+)([\\s\\S]*?<\\/li>)','i'), (m, pre, lab, rest) => `${pre}<strong>✓ ${lab}${rest.replace(/<\/li>$/i, '</strong></li>')}`);
  html = html.replace(new RegExp('(<(?:p|div)[^>]*>\\s*)(\\(?'+x+'\\)?[\\.)\\:]?\\s+)([\\s\\S]*?<\\/(?:p|div)>)','i'), (m, pre, lab, rest) => `${pre}<strong>✓ ${lab}${rest.replace(/<\/(p|div)>$/i, '</strong></$1>')}`);
  return html;
}

// ---------------- Parse satu halaman ------------------
const domParser = new DOMParser();
async function processDocument(doc, pageHref){
  const groups = [];
  const questions = doc.querySelectorAll('.question .question_content');
  for(const qc of questions){
    const qImg = qc.querySelector('.question_image');
    if (!qImg) continue;
    const kids = Array.from(qImg.childNodes).filter(n => !(n.nodeType === 1 && n.classList.contains('loader')));
    const ansIdx = kids.findIndex(n => n.nodeType === 1 && n.classList.contains('answerbox'));
    const preNodes  = ansIdx === -1 ? kids : kids.slice(0, ansIdx);
    const postNodes = ansIdx === -1 ? [] : kids.slice(ansIdx + 1);
    const preHTML  = await serializeNodesAsync(preNodes, pageHref);
    const postHTML = await serializeNodesAsync(postNodes, pageHref);
    const ansBox = ansIdx >= 0 ? kids[ansIdx] : null;
    groups.push({ readingHTML:'', parts:[{ preHTML, postHTML, correctLetter:getCorrectLetter(ansBox) }] });
  }
  return groups;
}

// --------------- Fetch semua halaman ------------------
const allGroups = [];
for(let i = startIdx; i <= endIdx; i++){
  const url = `${prefix}${i}`;
  try{
    console.log("[Exporter] Fetch:", url);
    const res  = await fetch(url, {credentials:'include'});
    if(!res.ok) throw new Error("HTTP " + res.status);
    const html = await res.text();
    const doc  = domParser.parseFromString(html, 'text/html');
    allGroups.push(...await processDocument(doc, url));
  }catch(err){
    console.warn("[Exporter] Gagal memproses", url, err);
  }
}
if(allGroups.length === 0){ console.warn("[Exporter] Tidak ada soal yang diekstrak."); return; }
const totalQuestions = allGroups.length;

// --- PERBAIKAN CSS DI SINI ---
const questionsStyles = `
<style>
  @page { size: A3; margin: 0.5in; }
  html, body { font-family: system-ui, sans-serif; line-height: 1.6; margin: 0; padding: 0; }
  .container { width: 11.2in; max-width: 100%; margin: 0.25in auto; }
  .q-block {
    border: 1px solid #e5e7eb;
    border-radius: 12px;
    padding: 14px;
    margin: 14px 0;
    background: #fff;
    page-break-inside: avoid; /* Jangan potong satu soal di tengah */
  }
  .q-title { font-weight: 700; font-size: 20px; margin-bottom: 10px; }
  .meta { font-weight: 700; font-size: 18px; }
  .content img { max-width: 100%; height: auto; display: block; }
</style>`;

const answersStyles = `
<style>
  @page { size: A3; margin: 0.5in; }
  html, body { font-family: system-ui, sans-serif; line-height: 1.6; margin: 0; padding: 0; }
  .container { width: 11.2in; max-width: 100%; margin: 0.25in auto; }
  section.q-block {
    border: 1px solid #e5e7eb;
    border-radius: 12px;
    padding: 14px;
    margin: 14px 0; /* Tambahkan margin agar ada jarak antar soal */
    background: #fff;
    page-break-inside: avoid; /* Jangan potong satu soal di tengah */
  }
  /* Hapus aturan 'always', biarkan browser yang memutuskan */
  section.q-block { page-break-before: auto; }

  .q-title { font-weight: 700; font-size: 20px; margin: 0 0 10px 0; }
  .meta { font-weight: 700; font-size: 18px; }
  .content-block { page-break-inside: avoid; margin: 0; line-height:0; }
  .content-block img { max-width: 100%; height: auto; display: block; margin:0; }
</style>`;

// --- Sisa skrip tidak diubah ---
const answersRuntimeFix = `
<script>
(function(){
  function detectContentBand(ctx, imgW, imgH){
    let left = imgW, right = 0;
    for(let y=imgH*0.2|0; y<imgH*0.8; y+=Math.max(1,(imgH/20|0))){
      const row = ctx.getImageData(0,y,imgW,1).data;
      for(let x=0;x<imgW;x+=4){
        const r=row[x*4], g=row[x*4+1], b=row[x*4+2];
        if(r<245||g<245||b<245){
          if(x<left) left=x;
          if(x>right) right=x;
        }
      }
    }
    if(left>=right) return {l:imgW*0.2|0,r:imgW*0.8|0};
    return {l:Math.max(0,left-5), r:Math.min(imgW-1,right+5)};
  }
  function isRowBlank(ctx,imgW,y,band){
    const row = ctx.getImageData(band.l,y,band.r-band.l,1).data;
    let nonWhite=0;
    for(let i=0;i<row.length;i+=4){
      const r=row[i],g=row[i+1],b=row[i+2];
      if(r<250||g<250||b<250) nonWhite++;
    }
    return (nonWhite/((row.length/4)||1)) < 0.003;
  }
  function findBlankCut(ctx,imgW,imgH,startY,endY,band){
    let best=endY;
    for(let y=endY-1;y>=startY;y--){
      if(isRowBlank(ctx,imgW,y,band)) return y;
    }
    return best;
  }
  async function slicer(){
    const imgs=document.querySelectorAll('.content img');
    for(const img of imgs){
      await new Promise(r=>{if(img.complete)r();else{img.onload=r;img.onerror=r;}});
      const H=img.naturalHeight,W=img.naturalWidth;
      if(H<800) continue;
      const c=document.createElement('canvas');c.width=W;c.height=H;
      const ctx=c.getContext('2d',{willReadFrequently:true});ctx.drawImage(img,0,0);
      const band=detectContentBand(ctx,W,H);
      const wrap=document.createElement('div');
      let y=0;
      const CH=480;
      while(y<H){
        let next=Math.min(y+CH,H);
        if(next<H){
          next=findBlankCut(ctx,W,H,y+100,next,band);
        }
        const h=next-y;
        if (h <= 0) break;
        const part=document.createElement('canvas');part.width=W;part.height=h;
        part.getContext('2d').drawImage(c,0,y,W,h,0,0,W,h);
        const out=document.createElement('img');out.src=part.toDataURL('image/png');
        const blk=document.createElement('div');blk.className='content-block';blk.appendChild(out);
        wrap.appendChild(blk);
        y=next;
      }
      img.replaceWith(wrap);
    }
  }
  window.addEventListener('load',slicer);
})();
<\/script>`;

function buildHTML(title,bodyClass,bodyContent,runtimeScript=''){
  const styles = bodyClass==='answers-page'?answersStyles:questionsStyles;
  return `<!doctype html><html><head><meta charset="utf-8"><title>${title}</title>${styles}</head><body class="${bodyClass}"><div class="container">${bodyContent}</div>${runtimeScript}</body></html>`;
}
const questionsBody = allGroups.map((g,i)=>`<section class="q-block" id="q_${i+1}"><div class="q-title">Question ${i+1} of ${totalQuestions}</div>${g.parts.map(p=>`<div class="content">${p.preHTML||''}</div>`).join('')}</section>`).join('');
const answersBody = allGroups.map((g,i)=>{const p=g.parts[0]||{};const marked=markCorrectChoiceIfPossible(p.preHTML,p.correctLetter);return `<section class="q-block" id="a_${i+1}"><div class="q-title">Question ${i+1} of ${totalQuestions}</div><div class="part"><div class="content">${marked||''}</div><div class="content"><span class="meta">Correct Answer: ${p.correctLetter||'N/A'}</span></div><div class="content"><span class="meta">Explanation:</span></div><div class="content">${p.postHTML||''}</div></div></section>`;}).join('');

function openInNewTab(filename,html){
  const blob=new Blob([html],{type:'text/html'});const url=URL.createObjectURL(blob);window.open(url,'_blank');
}

openInNewTab('questions.html',buildHTML('Questions','questions-page',questionsBody));
openInNewTab('answers.html',buildHTML('Answers','answers-page',answersBody,answersRuntimeFix));
console.log('[Exporter] Done:',totalQuestions);
})();
