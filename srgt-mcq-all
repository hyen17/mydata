(async () => {
  // === DEDUP GLOBAL BERDASARKAN NOMOR SOAL ===
  const seenQuestionNumbers = new Set();

  const savedData = [];
  let lastQuestionNumber = "";
  let isProcessing = false;
  let isPaused = false;
  let awaitingLoad = false;

const codeMap = {
  "2210": "Identifying Sources of Information",
  "2211": "Methods for Obtaining Information",
  "2212": "Using Document Tools to Obtain Information",
  "2220": "Evaluating Audit Evidence",
  "2221": "Criteria of Evaluating the Quality of Audit Evidence",
  "2222": "Factors That Impact the Reliability of Evidence",
  "2223": "Strength of Evidence",
  "2230": "Applying Technology in Internal Auditing",
  "2231": "Employing Efficient and Effective Solutions in Internal Audit",
  "2240": "Analytical Approaches and Process Mapping",
  "2241": "Process Workflow Segments",
  "2242": "Process Workflow Analysis",
  "2243": "Data Types",
  "2244": "Data Analytics",
  "2245": "Methods of Data Analysis",
  "2250": "Applying Analytical Review Techniques",
  "2251": "Major Types of Analytical Review Techniques",
  "2252": "Determining Appropriate Analytical Techniques",
  "2260": "Determining Audit Findings",
  "2261": "Evaluating the Significance of Potential Audit Findings",
  "2262": "Evaluating the Root Causes of Audit Findings",
  "2263": "Factors for Determining the Risk Significance of Audit Findings",
  "2270": "Engagement Workpapers",
  "2271": "Organizing Information in Workpapers",
  "2272": "Elements of Workpapers",
  "2273": "Analyzing Links Between Workpapers and Engagement Results",
  "2274": "Factors When Organizing and Retaining Engagement Documentation",
  "2280": "Engagement Conclusions",
  "2281": "Determining the Significance of Aggregated Findings",
  "2282": "Elements to Consider When Developing Engagement Conclusions"
};


  const questionWindow = window.open(window.location.href, "questionTab");
  if (!questionWindow) {
    alert("Pop-up diblokir. Harap izinkan pop-up untuk situs ini.");
    return;
  }

  alert("Tab B dibuka. Script akan otomatis mengklik NEXT di Tab B setelah menyimpan setiap soal.");

  // Tunggu Tab B selesai loading
  await new Promise(resolve => setTimeout(resolve, 3000));

  // === UTIL ===
  function normalizeQuestionNumber(raw) {
    if (!raw) return "";
    const m = String(raw).trim().match(/#?\s*(\d+)/);
    return m ? m[1] : String(raw).trim();
  }

  function findNextButton(doc) {
    const el = doc.querySelector('button#submitButton');
    if (!el) return null;
    const txt = (el.textContent || "").toUpperCase();
    return txt.includes("NEXT") ? el : null;
  }

  function setStatus(msg, color) {
    const el = document.getElementById("status");
    if (el) {
      el.textContent = msg;
      if (color) el.style.color = color;
    }
  }

  // === AMBIL REFERENSI (ketat: hanya blok "Reference" & hanya /reference/) ===
  function collectReferences(doc) {
    const results = new Set();

    // Kumpulkan SEMUA header kategori
    const headers = Array.from(doc.querySelectorAll('ul.list-inline.question-explanation-category-header'));

    // Untuk setiap header yang bertuliskan "Reference"
    const refHeaders = headers.filter(ul => {
      const label = ul.querySelector('.question-explanation-category');
      return label && /reference/i.test((label.textContent || '').trim());
    });

    for (const refHeader of refHeaders) {
      // Tentukan batas: header kategori berikut-nya (jika ada)
      const nextHeader = headers.find(h => h !== refHeader && (h.compareDocumentPosition(refHeader) & Node.DOCUMENT_POSITION_FOLLOWING));

      // Iterasi siblings setelah refHeader hingga sebelum nextHeader
      let el = refHeader.nextElementSibling;
      while (el && el !== nextHeader) {
        if (
          el.matches('a.btnInfoDialog.question-explanation-link') &&
          /\/reference\//i.test(el.getAttribute('data-url') || '')
        ) {
          const text = (el.textContent || '').trim();          // mis: "2314.01"
          const baseMatch = text.match(/^(\d{4})/);             // ambil "2314"
          const base = baseMatch ? baseMatch[1] : null;
          const desc = base && codeMap[base] ? codeMap[base] : '';
          results.add(desc ? `${text} — ${desc}` : text);
        }
        el = el.nextElementSibling;
      }
    }

    // Jika tidak ketemu blok Reference sama sekali, jangan ambil global (hindari "Relevant Terms")
    return Array.from(results);
  }

  // Sanitizer: hapus checked/disabled di input radio dalam label HTML
  function sanitizeLabelOuterHTML(labelEl) {
    try {
      const clone = labelEl.cloneNode(true);
      const inputs = clone.querySelectorAll('input[type="radio"]');
      inputs.forEach(inp => {
        inp.removeAttribute('checked');
        inp.removeAttribute('disabled');
      });
      return clone.outerHTML;
    } catch {
      // fallback regex kalau clone gagal
      let html = labelEl.outerHTML;
      html = html.replace(/\schecked(?:="checked")?/ig, '');
      html = html.replace(/\sdisabled(?:="disabled")?/ig, '');
      return html;
    }
  }

  async function processQuestion() {
    if (isProcessing || isPaused || awaitingLoad) return;
    isProcessing = true;

    try {
      const doc = questionWindow.document;

      if (doc.readyState !== 'complete' && doc.readyState !== 'interactive') {
        isProcessing = false;
        return;
      }

      const questionDiv    = doc.querySelector(".question-text");
      const choicesDiv     = doc.querySelector(".answer-choices");
      const explanationDiv = doc.querySelector("#explanationPanel .question-explanation");

      // Ambil nomor soal unik
      const questionRefDiv = doc.querySelector(".question-ref-text");
      const currentQuestionNumberRaw = questionRefDiv ? questionRefDiv.textContent : "";
      const currentQuestionNumber    = normalizeQuestionNumber(currentQuestionNumberRaw);

      if (!questionDiv || !choicesDiv || !currentQuestionNumber) {
        isProcessing = false;
        return;
      }

      // DEDUP cepat
      if (currentQuestionNumber === lastQuestionNumber) {
        console.log("⏩ Soal sama (berturutan), skip simpan…");
        const nextButtonA = findNextButton(doc);
        if (nextButtonA) {
          nextButtonA.click();
          console.log("🖱️ NEXT setelah duplikat (berturutan)");
          await new Promise(r => setTimeout(r, 2000));
        } else {
          isPaused = true;
          setStatus("⏸️ Tidak ada NEXT. Menunggu link baru untuk Tab B…", "orange");
          console.log("ℹ️ NEXT tidak ada. Proses di-pause.");
        }
        isProcessing = false;
        return;
      }

      // DEDUP global (tetap NEXT)
      if (seenQuestionNumbers.has(currentQuestionNumber)) {
        console.log(`⏭️ Soal #${currentQuestionNumber} sudah pernah disimpan, skip (GLOBAL).`);
        const nextButtonB = findNextButton(doc);
        if (nextButtonB) {
          nextButtonB.click();
          console.log("🖱️ NEXT setelah duplikat (global)");
          await new Promise(r => setTimeout(r, 2000));
        } else {
          isPaused = true;
          setStatus("⏸️ Tidak ada NEXT. Menunggu link baru untuk Tab B…", "orange");
          console.log("ℹ️ NEXT tidak ada. Proses di-pause.");
        }
        isProcessing = false;
        return;
      }

      console.log(`🔄 Memproses soal baru: #${currentQuestionNumber}`);

      // Simpan data soal
      const choices = Array.from(choicesDiv.querySelectorAll("label.session-radio")).map(label => {
        const htmlSanitized = sanitizeLabelOuterHTML(label); // <-- buang checked/disabled
        const isCorrect = label.classList.contains("session-radio-proper");
        return { html: htmlSanitized, isCorrect };
      });

      const explanation = explanationDiv ? [explanationDiv.innerHTML.trim()] : [];

      // Referensi akurat
      const references = collectReferences(doc);

      savedData.push({
        questionNumber: currentQuestionNumber,
        questionHtml: questionDiv.innerHTML.trim(),
        choices,
        feedbacks: explanation,
        references
      });

      seenQuestionNumbers.add(currentQuestionNumber);
      lastQuestionNumber = currentQuestionNumber;

      console.log(`✔ Saved #${currentQuestionNumber} (Total: ${savedData.length})`);
      setStatus(`🟢 Running… Terkumpul: ${savedData.length}`, "green");

      // NEXT
      await new Promise(resolve => setTimeout(resolve, 1000));
      const nextButton = findNextButton(doc);

      if (nextButton) {
        console.log("🖱️ Mengklik NEXT QUESTION…");
        nextButton.click();
        await new Promise(resolve => setTimeout(resolve, 2000));
      } else {
        console.log("ℹ️ Tombol NEXT tidak ditemukan. Masuk mode pause.");
        isPaused = true;
        setStatus("⏸️ Tidak ada NEXT. Menunggu link baru untuk Tab B…", "orange");

        const finishedText = doc.querySelector('body')?.textContent || "";
        if (/\b(finished|completed|akhir)\b/i.test(finishedText)) {
          console.log("✅ Sesi tampaknya selesai. Tetap pause menunggu link baru.");
        }
      }

    } catch (e) {
      console.warn("Gagal memproses soal:", e);
    }

    isProcessing = false;
  }

  const pollInterval = 3500;
  const poller = setInterval(() => {
    if (questionWindow.closed) {
      alert("Tab B ditutup. Simpan jika sudah selesai.");
      clearInterval(poller);
      return;
    }
    processQuestion();
  }, pollInterval);

  // === Printable ===
  const buildPrintableHTML = (showAnswers = false) => {
    const css = `
      <style>
        @page:first { margin-top: 0; }
        body { font-family: Arial, sans-serif; font-size: 16px; color: #000; line-height: 1.6; padding: 30px; margin-top: 0 !important; }
        .question-block { page-break-inside: avoid; margin-bottom: 30px; }
        .question-title { font-size: 18px; font-weight: bold; margin-bottom: 6px; }
        .question-body { margin-bottom: 12px; }
        label.session-radio { display: flex; align-items: flex-start; gap: 10px; margin-bottom: 8px; }
        label.session-radio input[type="radio"] { margin-top: 5px; }
        label.session-radio p { margin: 0; }
        .question-mode .session-radio-proper { font-weight: normal !important; }
        .answer-mode .session-radio-proper { font-weight: bold !important; }
        .explanation { margin-top: 10px; background: #f3f3f3; padding: 10px; border-left: 4px solid #999; }
        .reference { margin-top: 0; }
        hr { margin: 12px 0; }
      </style>
    `;

    const content = savedData.map((q, i) => {
      const modeClass = showAnswers ? "answer-mode" : "question-mode";
      const choicesHtml = q.choices.map(c => `<div class="${modeClass}">${c.html}</div>`).join("");
      const explanationHtml = showAnswers && q.feedbacks?.length ? `
        <div class="explanation">
          <b><i>Explanation:</i></b><br>${q.feedbacks.join("<br><br>")}
          ${q.references?.length ? `<div class="reference"><b><i>Reference:</i></b><br>${q.references.join("<br>")}</div>` : ""}
        </div>` : "";

      return `
        <div class="question-block">
          <div class="question-title">Question ${i + 1} of ${savedData.length}</div>
          <hr/>
          <div class="question-body">${q.questionHtml}</div>
          ${choicesHtml}
          ${explanationHtml}
          <!-- Nomor soal asli: ${q.questionNumber} (disembunyikan) -->
        </div>
      `;
    }).join("");

    return `
      <html>
        <head>
          <title>${showAnswers ? "Answers" : "Questions"}</title>
          ${css}
          <script>window.onload = () => setTimeout(() => window.print(), 600);</script>
        </head>
        <body>${content}</body>
      </html>
    `;
  };

  const renderPrintableHTML = () => {
    const qWin = window.open("", "_blank");
    qWin.document.write(buildPrintableHTML(false));
    qWin.document.close();

    const aWin = window.open("", "_blank");
    aWin.document.write(buildPrintableHTML(true));
    aWin.document.close();

    alert(`✅ ${savedData.length} soal berhasil di-generate. Silakan tekan Ctrl+P untuk menyimpan.`);
  };

  // === Panel kontrol ===
  const panel = document.createElement("div");
  panel.style = `
    position: fixed; top: 20px; right: 20px; z-index: 9999;
    background: #fff; padding: 12px; border: 1px solid #ccc;
    box-shadow: 0 0 6px rgba(0,0,0,0.2); font-family: sans-serif;
    border-radius: 8px; min-width: 270px;
  `;
  panel.innerHTML = `
    <strong>📚 PDF Tool v3.2 (Ref-only + Uncheck Radios)</strong><br/>
    <small>Soal terkumpul: <span id="count">0</span></small><br/><br/>

    <button id="generateHTMLPDF">Generate PDF</button>
    <button id="stopAutoNext">Stop Auto-NEXT</button>
    <br/><br/>

    <div style="display:flex; gap:6px; align-items:center;">
      <input id="newUrl" type="text" placeholder="Paste link baru di sini" style="flex:1; padding:6px; font-size:12px;">
      <button id="openNew">Open Link in Tab B</button>
    </div>
    <br/>
    <div id="status">🟢 Running...</div>
  `;
  document.body.appendChild(panel);

  document.getElementById("generateHTMLPDF").onclick = renderPrintableHTML;

  document.getElementById("stopAutoNext").onclick = () => {
    isPaused = true;
    setStatus("🟡 Stopped (manual)", "orange");
    alert(`Auto-NEXT dihentikan. ${savedData.length} soal terkumpul.`);
  };

  document.getElementById("openNew").onclick = async () => {
    const url = document.getElementById("newUrl").value.trim();
    if (!url) { alert("Masukkan URL baru terlebih dahulu."); return; }

    try {
      isPaused = false;
      awaitingLoad = true;
      setStatus("🔄 Membuka link baru di Tab B…", "blue");

      lastQuestionNumber = "";
      // Jangan reset seenQuestionNumbers agar dedup tetap global lintas sesi
      questionWindow.location.href = url;

      const start = Date.now();
      while (Date.now() - start < 15000) {
        await new Promise(r => setTimeout(r, 500));
        const state = questionWindow.document?.readyState;
        if (state === 'interactive' || state === 'complete') break;
      }

      awaitingLoad = false;
      setStatus("🟢 Running…", "green");
    } catch (e) {
      awaitingLoad = false;
      isPaused = true;
      setStatus("❌ Gagal membuka link. Tetap pause.", "red");
      console.warn("Gagal membuka link baru di Tab B:", e);
      alert("Gagal membuka link di Tab B. Coba paste ulang atau cek pop-up blocker.");
    }
  };

  // Update counter di panel
  setInterval(() => {
    const el = document.getElementById("count");
    if (el) el.textContent = savedData.length;
  }, 1000);
})();
