(() => {
  // ===== KONFIGURASI =====
  const STEM_ID = "ItemMultipleChoice1_pnlEditStem"; // id stem yang ada di halaman
  const WAIT_MS = 10000;   // total waktu tunggu maksimal (ms)
  const INTERVAL_MS = 150; // interval cek DOM (ms)

  // ===== UTIL =====
  const $ = (sel, ctx = document) => ctx.querySelector(sel);
  const pad2 = (n) => String(n).padStart(2, "0");
  const ts = () => {
    const d = new Date();
    return `${d.getFullYear()}${pad2(d.getMonth()+1)}${pad2(d.getDate())}-${pad2(d.getHours())}${pad2(d.getMinutes())}${pad2(d.getSeconds())}`;
  };

  const saveText = (text, filename) => {
    const blob = new Blob([text], { type: "text/plain;charset=utf-8" });
    const a = document.createElement("a");
    a.href = URL.createObjectURL(blob);
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    setTimeout(() => {
      URL.revokeObjectURL(a.href);
      a.remove();
    }, 0);
  };

  const waitFor = (checkFn, timeoutMs = WAIT_MS, intervalMs = INTERVAL_MS) =>
    new Promise((resolve, reject) => {
      const start = Date.now();
      const t = setInterval(() => {
        try {
          const val = checkFn();
          if (val) {
            clearInterval(t);
            resolve(val);
          } else if (Date.now() - start > timeoutMs) {
            clearInterval(t);
            reject(new Error("Timeout menunggu elemen."));
          }
        } catch (e) {
          clearInterval(t);
          reject(e);
        }
      }, intervalMs);
    });

  // ===== LOGIKA =====
  (async () => {
    // Pastikan stem ada (atau tunggu sebentar)
    const stemEl = await waitFor(() => document.getElementById(STEM_ID)).catch(() => null);
    if (!stemEl) {
      alert(`Elemen stem '${STEM_ID}' tidak ditemukan (timeout).`);
      return;
    }

    // Dapatkan prefix dasar (mis. 'ItemMultipleChoice1')
    const basePrefix = STEM_ID.split("_")[0];

    const IDS_TO_SAVE = [
      `${basePrefix}_pnlEditStem`,       // pertanyaan / stem
      `${basePrefix}_pnlViewDistractor`, // opsi jawaban
      `${basePrefix}_pnlExplanation`,    // panel tombol/area explanation
      `${basePrefix}_pnlQuestionHint`,   // isi rationale/explanation
    ];

    // (Opsional) coba ambil itemId untuk nama file
    const guessItemId = () => {
      const cand = $(`input[id*="${basePrefix}_"][id*="_hidItemId_"]`);
      if (cand && cand.value) return cand.value;
      const any = $(`input[id*="_hidItemId_"], input[name*="_hidItemId_"]`);
      if (any && any.value) return any.value;
      const btn = document.getElementById(`${basePrefix}_btnExplanation`);
      if (btn && btn.getAttribute("onclick")) {
        const m = btn.getAttribute("onclick").match(/,\s*(\d+)\s*\)\s*;/);
        if (m) return m[1];
      }
      return null;
    };

    // Kumpulkan HTML (outerHTML) dari blok-blok target
    const fragments = IDS_TO_SAVE.map((id) => {
      const el = document.getElementById(id);
      return el ? `<!-- BEGIN ${id} -->\n${el.outerHTML}\n<!-- END ${id} -->` : "";
    }).filter(Boolean);

    if (!fragments.length) {
      alert("Blok MCQ tidak ditemukan. Pastikan elemen-elemen target ada di halaman.");
      return;
    }

    const header =
      [
        "<!-- ======================================= -->",
        "<!-- Exported MCQ Blocks (stem + choices + explanation) -->",
        `<!-- Base Prefix: ${basePrefix} -->`,
        `<!-- Exported At: ${new Date().toString()} -->`,
        "<!-- ======================================= -->",
        "",
      ].join("\n");

    const content = header + fragments.join("\n\n");
    const itemId = guessItemId();
    const filename = `mcq${itemId ? "-" + itemId : ""}-${ts()}.txt`;

    saveText(content, filename);
    console.log(`Saved: ${filename}`);
  })();
})();
